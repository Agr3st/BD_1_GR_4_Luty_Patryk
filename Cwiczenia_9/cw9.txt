--- ZADANIE 1 ---

--- BEZ INDEKSOW --------------------------------------------------------------------------------------
QUERY PLAN
Hash Join  (cost=415.95..1581.22 rows=279 width=44) (actual time=7.237..34.661 rows=486 loops=1)
  Hash Cond: (soh.customerid = c.customerid)
  ->  Seq Scan on salesorderheader soh  (cost=0.00..1082.65 rows=31465 width=32) (actual time=0.299..20.399 rows=31465 loops=1)
  ->  Hash  (cost=413.75..413.75 rows=176 width=16) (actual time=6.921..6.922 rows=176 loops=1)
        Buckets: 1024  Batches: 1  Memory Usage: 16kB
        ->  Seq Scan on customer c  (cost=0.00..413.75 rows=176 width=16) (actual time=0.633..6.867 rows=176 loops=1)
              Filter: (territoryid = 5)
              Rows Removed by Filter: 19644
Planning Time: 7.378 ms
Execution Time: 35.116 ms

--- Analiza zapytania ---
Operacja łączenia typu Hash Join, która łączy wyniki dwóch sekwencyjnych przeszukań (Seq Scan) na tabelach salesorderheader i customer.
Koszty: Koszty operacji wynoszą od 415.95 do 1581.22.

Seq Scan on salesorderheader - pełne przeszukanie sekwencyjne na tabeli salesorderheader.
Koszty tej operacji wynoszą od 0.00 do 1082.65. Czas wykonania dla tej operacji wynosi od 0.299 do 20.399 ms.

Tworzony jest hash na kolumnie customerid w tabeli customer.
Koszty operacji haszowania wynoszą 413.75. Czas wykonania dla tej operacji wynosi od 6.921 do 6.922 ms.

Seq Scan on customer - pełne przeszukanie sekwencyjne na tabeli customer z warunkiem filtrującym territoryid = 5.
Koszty operacji wynoszą od 0.00 do 413.75.Czas wykonania dla tej operacji wynosi od 0.633 do 6.867 ms.
19644 wierszy zostało usuniętych przez warunek filtru.

Czas planowania zapytania wynosi 7.378 ms. To czas, który jest potrzebny na analizę zapytania i stworzenie planu wykonania.
Czas wykonania zapytania wynosi 35.116 ms. To jest czas faktycznego wykonania zapytania.


--- Z INDEKSAMI  --------------------------------------------------------------------------------------
QUERY PLAN
Hash Join  (cost=183.14..1348.41 rows=279 width=44) (actual time=0.177..11.991 rows=486 loops=1)
  Hash Cond: (soh.customerid = c.customerid)
  ->  Seq Scan on salesorderheader soh  (cost=0.00..1082.65 rows=31465 width=32) (actual time=0.011..3.537 rows=31465 loops=1)
  ->  Hash  (cost=180.94..180.94 rows=176 width=16) (actual time=0.154..0.156 rows=176 loops=1)
        Buckets: 1024  Batches: 1  Memory Usage: 16kB
        ->  Bitmap Heap Scan on customer c  (cost=5.65..180.94 rows=176 width=16) (actual time=0.069..0.123 rows=176 loops=1)
              Recheck Cond: (territoryid = 5)
              Heap Blocks: exact=24
              ->  Bitmap Index Scan on idx_territoryid  (cost=0.00..5.61 rows=176 width=0) (actual time=0.061..0.061 rows=176 loops=1)
                    Index Cond: (territoryid = 5)
Planning Time: 12.124 ms
Execution Time: 12.809 ms

--- Analiza zapytania ---
Hash Join, która łączy wyniki dwóch na tabelach salesorderheader i customer.
Koszty operacji wynoszą od 183.14 do 1348.41, co jest znacznie niższe niż w wersji bez indeksów (415.95 do 1581.22).
Czas wykonania dla tej operacji wynosi od 0.177 do 11.991 ms.

Seq Scan on salesorderheader - przeszukanie sekwencyjne na tabeli salesorderheader.
Koszty tej operacji wynoszą od 0.00 do 1082.65. Czas wykonania dla tej operacji wynosi od 0.011 do 3.537 ms.

Hash on customer - na kolumnie customerid w tabeli customer.
Koszty: Koszty operacji haszowania wynoszą 180.94.
Czas wykonania dla tej operacji wynosi od 0.154 do 0.156 ms.

Bitmap Heap Scan on customer - wykorzystuje indeks bitmapowy na kolumnie territoryid w tabeli customer.
Koszty operacji wynoszą od 5.65 do 180.94. Czas wykonania dla tej operacji wynosi od 0.069 do 0.123 ms.

Bitmap Index Scan on idx_territoryid: Wykorzystuje indeks bitmapowy na kolumnie territoryid.
Koszty operacji wynoszą od 0.00 do 5.61. Czas wykonania dla tej operacji wynosi od 0.061 ms.

Czas planowania zapytania wynosi 12.124 ms.
Czas wykonania zapytania wynosi 12.809 ms.


--- Porównanie wyników ---
Bez indeksów wykonanie opeacji zajęło 35.116 ms, z kolei z indeksami już 12.809 ms - prawie trzykrotnie mniej.
Dla Hash on customer z indeksami - 180.94 ms, co jest znacznie niższe niż w wersji bez indeksów (413.75).
W przypadku braku indeksów operacja Seq Scan była stosowana do przeszukiwania całej tabeli customer - jest to operacja sekwencyjna. Z uwagi na fakt, że tabela była duża, było to kosztowne. Dodanie indeksu na kolumnie territoryid umożliwiło zastosowanie operacji Bitmap Heap Scan, która pozwoliła na skutreczne filtrowanie danych. Pondato dzięki indeksowi na territoryid mamy operację Bitmap Index Scan, która wykorzystuje indeks bitmapowy do identyfikacji wierszy, które spełniają warunki - co jest to bardziej efektywne niż pełne przeszukiwanie sekwencyjne w przypadku braku indeksów. 

Wniosek: dla dużych zbiorów danych warto stosować indeksy, gdyż znacznie przyspieszają one przeszukiwanie danych.




--- ZADANIE 2 ---

--- a
BEGIN TRANSACTION;
UPDATE production.product
SET listprice = listprice * 1.1
WHERE productID = 680;
COMMIT;

--- b
BEGIN TRANSACTION;
DELETE FROM production.product
WHERE productID = 707;
ROLLBACK;

--- c
BEGIN TRANSACTION;
INSERT INTO production.product (name, productnumber, makeflag, finishedgoodsflag, safetystocklevel, reorderpoint,
				standartcost, listprice, daystomanufacture, sellstartdate)
VALUES ('drill', 'AR-9999', true, false, 1000, 750, 0, 0, 1, '2008-04-30 00:00:00');
COMMIT;
